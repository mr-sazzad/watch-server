// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  role        Role          @default(user)
  gender      Gender        @default(NotSet)
  phone       String?
  image       String?
  coverImage  String?
  address     String?
  age         String?
  isBanned    Boolean       @default(false)
  Cart        Cart[]
  Blog        Blog[]
  Payment     Payment[]
  WatchReview WatchReview[]
}

model Watch {
  id       String        @id @default(uuid())
  title    String
  status   Status        @default(Available)
  rating   Int?
  features String[]
  price    Int
  image    String
  desc     String
  reviews  WatchReview[]
  Cart     Cart[]
  Payment  Payment[]
}

model WatchReview {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  userId    String
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  watchId   String
  product   Watch    @relation(fields: [watchId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id       String @id @default(uuid())
  userId   String
  watchId  String
  quantity Int    @default(1)
  buyer    User   @relation(fields: [userId], references: [id])
  product  Watch  @relation(fields: [watchId], references: [id])
}

model Payment {
  id        String        @id @default(uuid())
  status    PaymentStatus @default(Unpaid)
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Watch         @relation(fields: [productId], references: [id], onDelete: Cascade)
  session   String
  cartId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Blog {
  id       String @id @default(uuid())
  title    String
  content  String
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

enum Role {
  user
  admin
  super_admin
}

enum Gender {
  Male
  Female
  Others
  NotSet
}

enum Status {
  Available
  Unavailable
  Upcoming
}

enum PaymentStatus {
  Paid
  Unpaid
}
